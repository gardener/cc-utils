<%def
  name="malware_scan_step(job_step, job_variant, cfg_set, indent)",
  filter="indent_func(indent),trim"
>
<%
from makoutil import indent_func
from concourse.steps import step_lib
main_repo = job_variant.main_repository()
repo_name = main_repo.logical_name().upper()

image_scan_trait = job_variant.trait('image_scan')
protecode_scan = image_scan_trait.protecode()
clam_av = image_scan_trait.clam_av()

filter_cfg = image_scan_trait.filters()
component_trait = job_variant.trait('component_descriptor')
%>
import datetime
import functools
import os
import sys
import tabulate
import textwrap
import uuid

import gci.componentmodel as cm

# debugging (dump stacktrace on error-signals)
import faulthandler
faulthandler.enable() # print stacktraces upon fatal signals
# end of debugging block

import ctx
try:
  ctx.configure_default_logging()
except:
  pass
import ccc.clamav
import concourse.util
import ci.util
import cnudie.retrieve
import mailutil
import product.util
import product.v2
import protecode.util
import saf.client
import saf.model as sm


from concourse.model.traits.image_scan import Notify
from protecode.model import CVSSVersion
from protecode.scanning_util import ProcessingMode
from clamav.util import virus_scan_images

${step_lib('scan_container_images')}
${step_lib('images')}
${step_lib('component_descriptor_util')}

cfg_factory = ci.util.ctx().cfg_factory()
cfg_set = cfg_factory.cfg_set("${cfg_set.name()}")

component_descriptor = parse_component_descriptor(schema_version=cm.SchemaVersion.V2)

filter_function = create_composite_filter_function(
  include_image_references=${filter_cfg.include_image_references()},
  exclude_image_references=${filter_cfg.exclude_image_references()},
  include_image_names=${filter_cfg.include_image_names()},
  exclude_image_names=${filter_cfg.exclude_image_names()},
  include_component_names=${filter_cfg.include_component_names()},
  exclude_component_names=${filter_cfg.exclude_component_names()},
)
uuid_marker = uuid.uuid4()
clamav_client = ccc.clamav.client_from_config_name('${clam_av.clamav_cfg_name()}')

ci.util.info('running malware scan for all container images')
malware_scan_results = [
  scan_result
  for scan_result in virus_scan_images(
    component_descriptor,
    filter_function,
    clamav_client,
  )
]
malware_scan_results_with_findings = [
  sr for sr in malware_scan_results
  if sr.findings
]
print(
  tabulate.tabulate(
    (
      (sr.resource.name, sr.scan_state, '\n'.join(sr.findings))
      for sr in malware_scan_results
    ),
    headers=('Resource Name', 'Scan State', 'Findings'),
    tablefmt='fancy_grid',
  )
)

# publish evidence to SAF-API
print(str(uuid_marker))

try:
  clamav_cfg = cfg_set.clamav('${clam_av.clamav_cfg_name()}')
  saf_client = saf.client.SafClient(saf_cfg=cfg_set.saf())
  evidence_rq = sm.MalwarescanEvidenceRequest(
    meta=sm.EvidenceMetadata(
      evidence_id='gardener-mm6',
      collection_date=datetime.datetime.now(tz=datetime.timezone.utc).isoformat(),
    ),
    data=sm.MalwarescanEvidenceData(
      pipeline_url=concourse.util.own_running_build_url(),
      component_name=component_descriptor.component.name,
      component_version=component_descriptor.component.version,
      scanning_endpoint=clamav_cfg.service_url(),
      scanning_cfg='${clam_av.clamav_cfg_name()}',
      scan_results=malware_scan_results, # XXX need to convert to proper format
      scan_log=retrieve_buildlog(uuid=uuid_marker),
    ),
  )
  saf_client.post_evidence(evidence=evidence_rq)
except:
  import traceback
  traceback.print_exc()


# only include results below threshold if email recipients are explicitly configured
notification_policy = Notify('${image_scan_trait.notify().value}')
if notification_policy is not Notify.EMAIL_RECIPIENTS:
  results_below_threshold = []

if not malware_scan_results_with_findings:
  print('nothing to report - early-exiting')
  sys.exit(0)

email_recipients = ${image_scan_trait.email_recipients()}

components = tuple(cnudie.retrieve.components(component=component_descriptor))

email_recipients = tuple(
  mail_recipients(
    notification_policy='${image_scan_trait.notify().value}',
    root_component_name='${component_trait.component_name()}',
    cfg_set=cfg_set,
    email_recipients=email_recipients,
    components=components
  )
)

print(f'Components: {len(components)}   Mail recipients: {len(email_recipients)}')

for email_recipient in email_recipients:
  print(f'Preparing email recipients for {email_recipient._recipients_component}')
  email_recipient.add_clamav_results(results=malware_scan_results_with_findings)

  if not email_recipient.has_results():
    ci.util.info(f'skipping {email_recipient}, since there are no relevant results')
    continue

  body = email_recipient.mail_body()
  email_addresses = set(email_recipient.resolve_recipients())

  # component_name identifies the landscape that has been scanned
  component_name = "${component_trait.component_name()}"

  if not email_addresses:
    ci.util.warning(f'no email addresses could be retrieved for {component_name}')
    continue

  import traceback
  # notify about critical vulnerabilities
  try:
    mailutil._send_mail(
      email_cfg=cfg_set.email(),
      recipients=email_addresses,
      mail_template=body,
      subject=f'[Action Required] landscape {component_name} has malware',
      mimetype='html',
    )
    ci.util.info('sent notification emails to: ' + ','.join(email_addresses))
  except:
    traceback.print_exc()
    ci.util.warning(f'error whilst trying to send notification-mails for {component_name}')
</%def>
