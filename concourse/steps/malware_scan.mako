<%def
  name="malware_scan_step(job_step, job_variant, cfg_set, indent)",
  filter="indent_func(indent),trim"
>
<%
from makoutil import indent_func
from concourse.steps import step_lib
main_repo = job_variant.main_repository()
repo_name = main_repo.logical_name().upper()

image_scan_trait = job_variant.trait('image_scan')
protecode_scan = image_scan_trait.protecode()
clam_av = image_scan_trait.clam_av()

filter_cfg = image_scan_trait.filters()
component_trait = job_variant.trait('component_descriptor')
component_descriptor_dir = job_step.input('component_descriptor_dir')
%>
import datetime
import functools
import logging
import os
import sys
import tabulate
import textwrap
import uuid

import gci.componentmodel as cm

logger = logging.getLogger('malware_scan.step')

# debugging (dump stacktrace on error-signals)
import faulthandler
faulthandler.enable() # print stacktraces upon fatal signals
# end of debugging block

import ci.log
try:
  ci.log.configure_default_logging()
except:
  pass
import ccc.clamav
import ccc.delivery
import ccc.oci
import ci.util
import clamav.cnudie
import clamav.client
import clamav.report
import cnudie.retrieve
import concourse.util
import mailutil
import product.util
import product.v2
import protecode.util
import saf.client
import saf.model as sm

from concourse.model.traits.image_scan import Notify

${step_lib('scan_container_images')}
${step_lib('images')}
${step_lib('component_descriptor_util')}

cfg_factory = ci.util.ctx().cfg_factory()
cfg_set = cfg_factory.cfg_set("${cfg_set.name()}")

component_descriptor = component_descriptor_from_dir(dir_path='${component_descriptor_dir}')

clamav_client = ccc.clamav.client(cfg='${clam_av.clamav_cfg_name()}')
oci_client = ccc.oci.oci_client()

logger.info('running malware scan for all container images')

results = []
have_findings = False
findings_count = 0
have_errors = False
err_count = 0

if (delivery_client := ccc.delivery.default_client_if_available()):
  logger.info('uploading results to deliverydb')
else:
  logger.warning('not uploading results to deliverydb, client not available')

for result in clamav.cnudie.scan_resources(
  component=component_descriptor,
  oci_client=oci_client,
  clamav_client=clamav_client,
  max_workers=${clam_av.parallel_jobs()},
):

  if delivery_client:
    findings_data = clamav.cnudie.resource_scan_result_to_findings_data(
        resource_scan_result=result,
        datasource='clamav-findings',
    )
    delivery_client.upload_metadata(data=findings_data)

  results.append(result)
  scan_result = result.scan_result
  logger.info(f'{scan_result}')
  if scan_result.malware_status is clamav.client.MalwareStatus.FOUND_MALWARE:
    have_findings = True
    findings_count += 1
  elif scan_result.malware_status is clamav.client.MalwareStatus.UNKNOWN:
    have_errors = True
    err_count += 1

# order so that "OK"-results are displayed at the end
results = sorted(results, key=lambda r: r.scan_result.malware_status, reverse=True)

logger.info(f'summary: {findings_count=} {err_count=}')
logger.info('findings and errors are printed on top of table\n')

print(clamav.report.as_table(scan_results=results, tablefmt='fancy_grid'))

try:
  # publish evidence to SAF-API
  uuid_str = str(uuid.uuid4())
  print(uuid_str)

  clamav_cfg = cfg_set.clamav('${clam_av.clamav_cfg_name()}')
  saf_client = saf.client.SafClient(saf_cfg=cfg_set.saf())
  evidence_rq = sm.MalwarescanEvidenceRequest(
    meta=sm.EvidenceMetadata(
      evidence_id='gardener-mm6',
      collection_date=datetime.datetime.now(tz=datetime.timezone.utc).isoformat(),
    ),
    data=[results],
  )
  res = saf_client.post_evidence(evidence=evidence_rq)
  print(f'uploaded evidence to saf-api: {res=}')
except:
  import traceback
  traceback.print_exc()

notification_policy = Notify('${image_scan_trait.notify().value}')

if notification_policy is not Notify.EMAIL_RECIPIENTS:
  print('nobody to report to - early-exiting')
  sys.exit(0)


# component_name identifies the landscape that has been scanned
component_name = "${component_trait.component_name()}"

if not have_findings and not have_errors:
  subject = f'[CLEAN] - Malware-scan results for landscape {component_name}'
  header = f'No malware was found, successfully scanned {len(results)=} artifacts'
elif not have_findings and have_errors:
  subject = f'[Action Required] {component_name=}: malware-scan-errors'
  header = f'Did not find malware. However, there were {err_count} scan-errors (see table below)'
elif have_findings and not have_errors:
  subject = f'[Action Required] {component_name=}: found malware'
  header = f'Found {findings_count=} resources potentially containing malware (see table below)'
elif have_findings and have_errors:
  subject = 'f[Action Required] {component_name=}: scan-errors and found malware'
  header = f'''Found {findings_count=} reosurces potentially containing malware. Also,
    {err_count} scanning errors occurred. See table below.
  '''

body = f'''
  <em>{header}</em>
  <p>
  {clamav.report.as_table(scan_results=results, tablefmt='html')}
'''

email_addresses = ${image_scan_trait.email_recipients()}

try:
  mailutil._send_mail(
    email_cfg=cfg_set.email(),
    recipients=email_addresses,
    mail_template=body,
    subject=subject,
    mimetype='html',
  )
  logger.info(f'sent notifications to: {email_addresses=}')
except:
  import traceback
  traceback.print_exc()
  logger.warning(f'error whilst trying to send notification-mails for {component_name=}')
</%def>
