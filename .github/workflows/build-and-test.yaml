name: Build and Test
run-name: Building and testing
on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
        default: snapshot
        description: |
          the "mode" to use. passed to `prepare` (currently for selecting  target-registries)

    outputs:
      version-commit-objects:
        description: commit-objects (for importing commit changing to effective version)
        value: ${{ jobs.prepare.outputs.version-commit-objects }}
      version-commit-digest:
        description: commit-digest for version-commit
        value: ${{ jobs.prepare.outputs.version-commit-digest }}
      effective-version:
        description: effective version used during build
        value: ${{ jobs.prepare.outputs.version }}
      base-component-descriptor:
        description: |
          the base OCM Component-Descriptor in YAML-format (use `merge-ocm-fragments`-action
          to collect full component-descriptor):
        value: ${{ jobs.prepare.outputs.component-descriptor }}

jobs:
  prepare:
    uses: ./.github/workflows/prepare.yaml
    with:
      mode: ${{ inputs.mode }}

  setuptools-version:
    runs-on: ubuntu-latest
    permissions: {}
    needs:
      - prepare
    outputs:
      setuptools-version: ${{ steps.version-setuptools.outputs.setuptools-version }}
    steps:
    - name: version-setuptools
      id: version-setuptools
      run: |
        set -eu
        version=${{ needs.prepare.outputs.version }}
        if [[ "${version}" == *-* ]]; then
          # version was non-final - add suffix compliant w/ pep-440
          version="${version%%-*}-dev0"
        fi
        echo "setuptools-version=${version}" >> ${GITHUB_OUTPUT}

  package:
    runs-on: ubuntu-latest
    environment: build
    needs:
      - setuptools-version
    steps:
    - name: Install setuptools
      run: |
        pip3 install --root-user-action ignore \
          setuptools \
          pyyaml
    - uses: actions/checkout@v4
    - name: create distribution package
      id: package
      run: |
        set -eu
        version=${{ needs.setuptools-version.outputs.setuptools-version }}
        echo "version: ${version}"
        echo "${version}" | .ci/write-version
        pkg_dir=dist
        mkdir -p ${pkg_dir}
        pkg_dir="$(readlink -f dist)"
        echo "pkgdir: ${pkg_dir}"
        for path in \
          setup.py \
          setup.gha.py \
          setup.oci.py \
          setup.ocm.py \
          setup.whd.py \
        ; do
         echo "building distribution package from ${path}"
         python3 ${path} \
            bdist_wheel \
            --dist-dir ${pkg_dir}
         rm -rf build
        done

        # special-case: cli-package (need to chdir in order to not confuse setuptools)
        (
          cd cli
          python3 setup.py \
            bdist_wheel \
            --dist-dir ${pkg_dir}
        )

        echo "Built packages"
        ls "${pkg_dir}"
        blobs_dir="${pkg_dir}/blobs.d"
        mkdir ${blobs_dir}
        resources_file=resources.yaml
        for package in \
          gardener-cicd-whd \
          gardener-cicd-cli \
          gardener-cicd-libs \
          gardener-gha-libs \
          gardener-oci \
          gardener-ocm \
          ; do
          path="$(echo $package | tr - _)-*"
          prefix=dist
          access_type='localBlob'
          outf="${pkg_dir}/${package}.tar.gz"
          tar cJf ${outf} -C ${pkg_dir} $(cd ${pkg_dir}; ls ${path})
          mimetype=$(file -i ${outf} | cut -d: -f2 | cut -d' ' -f2-)
          leng=$(stat -c"%s" ${outf})
          digest="$(sha256sum ${outf} | cut -d' ' -f1)"
          echo "\
        - name: ${package}
          version: ${version}
          type: ${mimetype}
          relation: local
          access:
            type: localBlob
            localReference: sha256:${digest}
            size: ${leng}
            mediaType: ${mimetype}" \
          >> ${resources_file}
          mv ${outf} ${blobs_dir}/${digest}
        done
        cp "${resources_file}" dist/ocm_resources.yaml
        echo "ocm_resources=dist/ocm_resources.yaml" >> "${GITHUB_OUTPUT}"
        find "${pkg_dir}"
        tar czf distribution-packages.tar.gz dist
    - name: export-ocm-fragments
      uses: gardener/cc-utils/.github/actions/export-ocm-fragments@master
      with:
        ocm-resources-file: dist/ocm_resources.yaml
        blobs-directory: dist/blobs.d
    - uses: actions/upload-artifact@v4
      with:
        name: distribution-packages
        path: distribution-packages.tar.gz

  update-draft-relase:
    if: ${{ inputs.mode != 'release' &&
          github.ref_name == github.event.repository.default_branch &&
          ! fromJSON(needs.prepare.outputs.is-fork)
      }}
    needs:
      - prepare
    uses: ./.github/workflows/draft-release.yaml
    with:
      component-descriptor: ${{ needs.prepare.outputs.component-descriptor }}
      ocm-repositories: ${{ needs.prepare.outputs.ocm-releases-repository }}

  lint:
    runs-on: ubuntu-latest
    needs:
      - package
      - prepare
    container:
      image: python:3.12-alpine
    steps:
    - uses: actions/checkout@v4
    - name: Retrieve Distribution Packages
      uses: actions/download-artifact@v4
      with:
        name: distribution-packages
    - name: lint
      run: |
        echo "install dependencies for python-packages"
        if ! apk add --no-cache $(cat gardener-cicd-libs.apk-packages) >/tmp/apk.log; then
          echo "error while trying to install apk-packages:"
          cat /tmp/apk.log
          exit 1
        fi
        tar xf distribution-packages.tar.gz -C /tmp
        echo "installing linters"
        export CFLAGS='-Wno-int-conversion'
        if ! pip3 install --pre --upgrade --break-system-packages \
          --find-links /tmp/dist \
          gardener-cicd-libs \
          gardener-cicd-cli \
          'gardener-oci[async]' \
          gardener-ocm \
          bandit \
          flake8 \
          setuptools \
          pylama \
          pylint \
          > /tmp/pip3-install.log; then
          echo "error while trying to install packages:"
          cat /tmp/pip3-install.log
        fi

        echo "running linters"
        blobs_dir=blobs.d
        mkdir $blobs_dir
        bandit_logfile=bandit.log
        bandit_evidence="${blobs_dir}/bandit.tar.gz"

        bandit_extra_args="-f txt -o ${bandit_logfile}" \
          .ci/lint

        # pass bandit.log + used cfg (pyproject.toml) as evidence
        tar czf $bandit_evidence $bandit_logfile pyproject.toml

    - uses: ./.github/actions/export-ocm-fragments
      with:
        ocm-resources: |
          name: sast-linting-evidence
          relation: local
          access:
            type: localBlob
            localReference: bandit.tar.gz
          labels:
            - name: gardener.cloud/purposes
              value:
                - lint
                - sast
                - pybandit
            - name: gardener.cloud/comment
              value: |
                we use bandit (linter) for SAST-Scans.
                See: https://bandit.readthedocs.io/en/latest/
        blobs-directory: blobs.d

  unittests:
    needs:
      - package
    permissions:
      contents: read
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    steps:
    - uses: actions/checkout@v4
    - name: Retrieve Distribution Packages
      uses: actions/download-artifact@v4
      with:
        name: distribution-packages
    - name: run-tests
      run: |
        set -eu
        echo "install dependencies for python-packages"
        apk add --no-cache $(cat gardener-cicd-libs.apk-packages)
        echo "install packages"
        tar xf distribution-packages.tar.gz -C /tmp
        export CFLAGS='-Wno-int-conversion'
        if ! pip3 install --pre --break-system-packages \
          --find-links /tmp/dist \
          gardener-cicd-libs \
          gardener-cicd-cli \
          gardener-oci \
          gardener-ocm \
          pytest \
          setuptools \
            > /tmp/pip3-install.log; then
          echo "error while trying to install packages:"
          cat /tmp/pip3-install.log
        fi

        pip3 list

        echo "running tests"
        mkdir /tmp/fake-cfg.d
        touch /tmp/fake-cfg.d/config_types.yaml
        export CC_CONFIG_DIR=/tmp/fake-cfg.d
        .ci/test

  images:
    name: Build Job-Image
    needs:
      - package # needed indirectly (distribution-packages-artefact)
      - prepare
      - setuptools-version
    permissions:
      contents: read
      packages: write
      id-token: write
    uses: ./.github/workflows/oci-ocm.yaml
    with:
      name: job-image
      oci-registry: ${{ needs.prepare.outputs.oci-registry }}
      oci-repository: cicd/job-image
      oci-platforms: 'linux/amd64,linux/arm64'
      version: ${{ needs.prepare.outputs.version }}
      # workaround: we need to use a deviating version for setuptools
      prebuild-hook: |
        echo "${{ needs.setuptools-version.outputs.setuptools-version }}" | .ci/write-version
      build-ctx-artefact: distribution-packages
      untar-build-ctx-artefact: distribution-packages.tar.gz
      ocm-labels: |
        - name: cloud.gardener.cnudie/dso/scanning-hints/package-versions
          value:
            - name: containerd
              version: v1.6.15
        - name: gardener.cloud/cve-categorisation
          value:
            authentication_enforced: true
            availability_requirement: low
            confidentiality_requirement: high
            integrity_requirement: high
            network_exposure: protected
            user_interaction: gardener-operator

  documentation:
    name: Generate Documentation
    needs:
      - images
    runs-on: ubuntu-latest
    environment: build
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Setup Docker-Buildx
      uses: docker/setup-buildx-action@v3
    - name: Generate Documentation
      run: |
        image_ref=${{ needs.images.outputs.oci-reference }}
        mkdir documentation-out.d
        docker run -v$PWD:/src \
          -e GH_PAGES_PATH=/src/documentation-out.d \
          ${image_ref} \
          /src/.ci/generate_documentation
        ls documentation-out.d
    - uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: documentation-out.d

  publish-documentation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    needs:
      - documentation

    steps:
      - uses: actions/checkout@v4
        ref: refs/heads/gh-pages
      - name: Retrieve Documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: /tmp/documentation-out.d
      - uses: gardener/cc-utils/.github/actions/setup-git-identity@master
      - name: Publish Documentation
        run: |
          tar c -C /tmp/documentation-out.d . | tar x -C.
          git status
          if [ -z "$(git status --porcelain)" ]; then
            echo "no changes in documentation - no need to update documentation"
            exit 0
          fi
          git add -A
          git commit -m "update documentation"
          git push origin refs/heads/gh-pages
