name: Release
description: |
  An opinionated re-usable workflow for Gardener-Release-Pipelines. Release-Pipelines based on
  this workflow:

    - publish OCM-Component-Descriptors
    - push tags, GitHub-Releases, and "bump-commits"
    - collect release-notes (based on `gardener/cc-utils/.github/actions/release-notes` action)

  Note: This workflow assumes there is a GitHub-App granting the privileges to "write contents" (
  for "git-push"), in addition to declared privileges for GitHub-Action-Token. Said application is
  also required to be added to `bypassers` for any configured branch-protection-rules (or, to be more
  precise: rulesets, as "classic" branch-protections do not allow this).

  The GitHub-App's ID is read from `vars.GARDENER_GITHUB_ACTIONS_APP_ID` (org-variable), and its
  private-key needs to be passed in as secret from `secrets.GARDENER_GITHUB_ACTIONS_PRIVATE_KEY`).

on:
  workflow_call:
    secrets:
      github-app-secret-key:
        required: false
        description: |
          The secret-key for the `Gardener-GitHub-App` (`vars.GARDENER_GITHUB_ACTIONS_APP_ID`)
          If not passed (in which case calling workflows need to set `secrets: inherit`), defaults
          to `secrets.GARDENER_GITHUB_ACTIONS_PRIVATE_KEY`.
    inputs:
      component-descriptor:
        required: false
        type: string
        description: |
          A base-component-descriptor, as output from `base-component-descriptor` action.
          Additional Component-Descriptor-Fragments as exported from the `export-ocm-fragments`
          action will be merged into it (i.e. callers do not need to take care of this).

          If not passed, an artefact named `base-component-descriptor` will be assumed to
          exist, and used as default / fallback.
      release-commit-objects:
        required: false
        type: string
        description: |
          The release-commit (created from build-job) to publish. The expected format matches the
          one emitted by the `capture-commit` action; i.e. the value is expected to be a base64
          encoded TARchive containing all objects belonging to the commit, as taken from `.git`
          directory after commit was created.

          If not passed, the action will fallback to expecting the commit-objects having been
          uploaded into an artefact named `release-commit-objects` (which the `prepare.yaml`)
          workflow does by default.
      release-commit-target:
        required: false
        default: branch
        type: string
        description: |
          Where the relase-commit should be published to. Passed to `release` action's equally-named
          input. Allowed values are:
            - branch # will push to same branch the workflow was run for
            - tag # will push release-commit to release-tag
      next-version:
        required: false
        default: bump-minor
        type: string
        description: |
          How the next version (from bump-commit) should be calculated. Will be passed to `version`
          action. (some) allowed values are:
            - bump-major
            - bump-minor
            - bump-patch
      next-version-callback-action-path:
        required: false
        type: string
        description: |
          the path to a local action (relative to repository-root) that should be called during
          creation of "bump-commit"
          passed to `gardener/cc-utils/.github/actions/version` as callback-action-path input.
      slack-channel-id:
        required: false
        type: string
        description: |
          If passed, release-notes will be posted into slack-channel w/ specified ID.

          Use `release-notes`-output if more control is desired.

          Note: see `slack-token` for authentication options.
      slack-token:
        required: false
        type: string
        description: |
          The auth-token to use to authenticate against slack. Only needed if `slack-channel-id` is
          passed. For convenience, defaults to `secrets.SLACK_APP_TOKEN_GARDENER_CICD` (calling
          workflows must set `secrets: inherit` for this to work.
      release-on-github:
        default: true
        type: boolean
        description: |
          If set to `true`, the workflow will create a new GitHub release (or convert an existing
          draft release to an actual release).
      github-tag-template:
        default: '${version}'
        type: string
        description: |
          GitHub tag template to use for the created release tag. Currently only supported
          template-var: ${version} (bash-syntax).
      assets:
        type: string
        required: false
        description: |
          An optional list of release-assets in YAML-format that will be added to the GitHub-Release.
          If creation of github-release is suppressed (via `release-on-github` input), this value
          will be ignored.

          Each element is expected to have the following form:

          ```
          name: <name, as it should be set for the release-asset>, required
          mime-type: # optional (will be determined using libmagic, if absent)
          type: ocm-resource # mandatory; only `ocm-resource` is supported; for future extensions
          id:
            name: <ocm-resource-name>, required
            type: <ocm-resource-type>, optional
            <extra-id-attr>: <value> # optional - any attributes from extraIdentity
          ```

          `id` must be specified such that a resource is identified unambiguously. Only resources
          that are stored as a localBlob (access-type) are supported.

          Example (assuming pipeline builds `helm` for multiple platforms):
          ```
          assets: |
           - name: helm-linux-x86-64
             mime-type: application/x-pie-executable
             type: ocm-resource
             id:
              name: helm
              os: linux
              arch: x86_64
          ```

    outputs:
      release-notes:
        description: |
          The release-notes accompanying this release (note that those will by default be
          published as part of component-descriptor, as well as via slack, if `slack-channel-id`
          input is specified).
        value: ${{ jobs.release-and-bump.outputs.release-notes }}
jobs:
  release-and-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    outputs:
      release-notes: ${{ steps.release-notes.outputs.release-notes }}

    steps:
      - name: collect-component-descriptor
        id: component-descriptor
        uses: gardener/cc-utils/.github/actions/merge-ocm-fragments@master
        with:
          component-descriptor-artefact: base-component-descriptor
          component-descriptor: ${{ inputs.component-descriptor }}
          outdir: /tmp/ocm
      - uses: gardener/cc-utils/.github/actions/release-notes@master
        id: release-notes
        with:
          component-descriptor: ${{ steps.component-descriptor.outputs.component-descriptor }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.GARDENER_GITHUB_ACTIONS_APP_ID }}
          private-key: ${{ secrets.github-app-secret-key || secrets.GARDENER_GITHUB_ACTIONS_PRIVATE_KEY }}
      - uses: gardener/cc-utils/.github/actions/release@master
        with:
          component-descriptor: ${{ steps.component-descriptor.outputs.component-descriptor }}
          component-descriptor-blobs-dir: /tmp/ocm/blobs.d
          release-commit-objects: ${{ inputs.release-commit-objects }}
          release-commit-objects-artefact: release-commit-objects
          release-commit-target: ${{ inputs.release-commit-target }}
          next-version: ${{ inputs.next-version }}
          next-version-commit-message: "next version: ${version}"
          next-version-callback-action-path: ${{ inputs.next-version-callback-action-path }}
          release-notes: ${{ steps.release-notes.outputs.release-notes }}
          full-release-notes: ${{ steps.release-notes.outputs.full-release-notes }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          git-push-token: ${{ steps.app-token.outputs.token }}
          release-on-github: ${{ inputs.release-on-github }}
          github-tag-template: ${{ inputs.github-tag-template }}
          assets: ${{ inputs.assets }}

      - name: write-release-notes-to-file
        if: ${{ inputs.slack-channel-id != '' }}
        run: |
          cat <<"EOF" > release-notes.md
          ${{ steps.release-notes.outputs.release-notes }}
          EOF
      - name: publish-release-notes-to-slack
        if: ${{ inputs.slack-channel-id != '' }}
        uses: slackapi/slack-github-action@v2
        with:
          method: files.uploadV2
          token: ${{ secrets.slack-token || secrets.SLACK_APP_TOKEN_GARDENER_CICD }}
          payload: |
            channel_id: ${{ inputs.slack-channel-id }}
            title: '[${{ steps.component-descriptor.outputs.component-version }} released]'
            file: ./release-notes.md
