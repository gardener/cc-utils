name: Release
on:
  workflow_dispatch:
    inputs:
      release-to-pypi:
        required: false
        type: boolean
        default: false

defaults:
  run:
    shell: bash

jobs:
  build:
    uses: ./.github/workflows/build-and-test.yaml
    with:
      release: true


  publish-release-and-bump-commit:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: install git
        run: |
          if ! which git &>/dev/null; then
            apt-get install git -y
          fi
      - uses: actions/checkout@v4
      - uses: gardener/cc-utils/.github/actions/setup-git-identity@master
      - name: Import Release-Commit
        uses: ./.github/actions/import-commit
        with:
          commit-objects: ${{ needs.build.outputs.release-commit-objects }}
          commit-digest: ${{ needs.build.outputs.release-commit-digest }}

      - name: Push Release-Commit
        id: releasecommit
        run: |
          echo "gha-creds*" >> .git/info/exclude
          effective_version=${{ needs.build.outputs.effective-version }}
          commit_digest=$(git rev-parse @)
          tgt_ref="refs/tags/${effective_version}"
          echo "pushing release-commit ${commit_digest} to ${tgt_ref}"
          git push origin "@:${tgt_ref}"

          # reset again to upstream branch (to allow for easier publishing of bump-commit)
          git fetch origin ${{ github.ref }}
          git checkout -B ${{ github.ref_name }} FETCH_HEAD

      - name: Create Bump-Commit
        uses: ./.github/actions/version
        with:
          read-callback: .ci/read-version
          write-callback: .ci/write-version
          commit-message: "next version: ${version}"
          version-operation: bump-minor
          repository-operation: commit-to-head
      - name: Push Bump-Commit
        run: |
          git push origin
      - name: Retrieve Documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: /tmp/documentation-out.d
      - name: Publish Documentation
        run: |
          git fetch origin gh-pages
          git checkout gh-pages
          git clean -dfx
          git status
          echo "let's hope our worktree is clean"
          tar c -C /tmp/documentation-out.d . | tar x -C.
          git status
          if [ -z "$(git status --porcelain)" ]; then
            echo "no changes in documentation - no need to update documentation"
            git checkout master # needed for post-gar
            exit 0
          fi
          git add -A
          git commit -m "update documentation"
          git push origin refs/heads/gh-pages
          git checkout master # needed for post-gar

  pypi:
    if: ${{ inputs.release-to-pypi }}
    runs-on: ubuntu-latest
    name: Publish to PYPI
    needs:
      - build
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Retrieve Distribution Packages
        uses: actions/download-artifact@v4
        with:
          name: distribution-packages
          path: /tmp/dist
      - name: prepare build-filesystem
        id: prepare
        run: |
          cp -r /tmp/dist .
          ls -lta dist/
          rm -rf dist/blobs.d dist/ocm_resources.yaml
          ls -lta dist/
      - name: publish to pypi
        uses: pypa/gh-action-pypi-publish@release/v1
