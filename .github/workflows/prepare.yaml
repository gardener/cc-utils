name: Prepare

# description: |
#   An opinionated workflow that will
#   - output target OCI Registries / OCM Repositories
#   - calculate an effective version (and create a commit for switching to this version)
#   - create a base OCM Component-Descriptor
#
#   All outputs are also exposed as an artefact (name can be influenced via output-artefact input).
#   Said artefact contains a TARfile (name can be controlled via output-artefact-filename input),
#   which in turn contains regular files named like the respective output, containing the outputs'
#   values, prefixed with `prepare-values.d`

on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
        description: |
          Selects the build's mode, which affects which OCI Registries / OCM Repositories to
          select, as well as the default version operation.

          Allowed values:
            - snapshot
            - release

          In `snapshot` mode, snapshot-registries will be returned. Effective version will be
          set to repository-version w/ `-${commit-digest}`-suffix.

          In `release` mode, release-registries will be returned. Effective version will be
          finalised version of repository-version.
      output-artefact:
        default: prepare-workflow-values
        type: string
        description: |
          Specifies the artefact-name to which this workflow should upload its outputs to.
      output-artefact-filename:
        default: prepare-workflow-values.tar
        type: string
      version-commit-callback-action-path:
        type: string
        required: false
        description: |
          the path to a local action (relative to repository-root) that should be called during
          creation of "version-commit" (in case of release-mode, this commit will be used as
          release-commit).
          passed to `gardener/cc-utils/.github/actions/version` as `callback-action-path` input.
      versionfile:
        type: string
        required: false
      version-operation:
        type: string
        required: false
        default: set-prerelease
        description: |
          how to calculate effective version. Possible values:
          - noop: keep version as-is
          - set-prerelease: replace / set version's prerelease (e.g. 1.2.3-${prerelease})
          - bump-major: increment major-version by 1
          - bump-minor: increment minor-version by 1
          - bump-patch: increment patch-version by 1
      base-component-file:
        default: .ocm/base-component.yaml
        type: string
      checkout-fetch-depth:
        default: 1
        type: number
        description: |
          passed to checkout. Useful longer history is required.
      checkout-submodules:
        default: false
        type: string
        description: |
          passed to checkout (as `submodules` input)
      checkout-token:
        default: ''
        type: string
        description: |
          passed to checkout (as `token` input)
      post-process:
        type: string
        required: false
        default: none
        description: |
          configures how generated base-component-descriptor should be post-processed. Options:
          - component-cli
          - callback
          - none
      oci-registry-prefix:
        type: string
        default: europe-docker.pkg.dev/gardener-project
        description: |
          passed to `prepare`-action as equally-named input
      snapshots-suffix:
        type: string
        default: snapshots
        description: |
          passed to `prepare`-action as equally-named input
      releases-suffix:
        type: string
        default: releases
        description: |
          passed to `prepare`-action as equally-named input
      ocm-repositories:
        required: false
        type: string
        description: |
          An optional, comma-separated list of OCM-Repositories that should be used for looking-up
          OCM-Component-Versions. The OCM releases repository will always be appended to the list if
          it is not part of it yet.
      release-notes-path:
        required: false
        type: string
        default: .ocm/release-notes
        description: |
          The relative path (from repository root) to the directory containing the release-notes docs.

    outputs:
      ocm-repository:
        description: the ocm-repository to use for publishing to for the selected mode.
        value: ${{ jobs.version-and-ocm.outputs.ocm-repository }}
      ocm-releases-repository:
        description: the ocm-releases-repository (independent of chosen mode)
        value: ${{ jobs.version-and-ocm.outputs.ocm-releases-repository }}
      ocm-repositories:
        description: the ocm-repositories which may be used to lookup component-versions
        value: ${{ jobs.version-and-ocm.outputs.ocm-repositories }}
      oci-registry:
        description: the oci-registry to use for publishing to for the selected mode
        value: ${{ jobs.version-and-ocm.outputs.oci-registry }}
      is-fork:
        description: boolean indicating whether or not current repository is a fork
        value: ${{ jobs.version-and-ocm.outputs.is-fork }}
      is-pr-from-fork:
        description: |
          boolean indicating whether or not this workflow was triggered from a `pull_request` event
          of a repository where the owner differs from the origin.
        value: ${{ jobs.version-and-ocm.outputs.is-pr-from-fork }}
      can-push:
        description: |
          boolean indicating whether or not current workflow is able to push (to OCI-Registries).
          this value is derived from workflow-trigger and repository.

          If repository is not a fork (or a fork within the same organisation), pushing is always
          deemed possible (following cases refer to forks, only).

          If the `workflow_event` reads `pull_request`, pushing is _not_ deemed to be possible.

          If the `workflow_event` reads `pull_request_target`, pushing is possible, if the
          `author_association` of the pullrequest-event is one of `COLLABORATOR`,
          `MEMBER`, `OWNER`.
          However special checkout-handling is needed (which is not yet
          implemented), hence for now, is also deemed to not be possible.
          TODO update this documentation once this is implemented.
        value: ${{ jobs.version-and-ocm.outputs.can-push }}

      version:
        description: the effective version
        value: ${{ jobs.version-and-ocm.outputs.version }}
      version-commit-digest:
        description: |
          The commit-digest of the version-change-commit.
        value: ${{ jobs.version-and-ocm.outputs.commit-digest }}
      version-commit-artefact:
        description: |
          The artifact-name of the artifact into which release-commit was captured.
          It is output using the `capture-commit` action, and can be imported using the
          `import-commit` action.
        value: release-commit-objects

      component-descriptor:
        description: |
          A base-component-descriptor, as output by `base-component-descriptor` action.
        value: ${{ jobs.version-and-ocm.outputs.component-descriptor }}

jobs:
  version-and-ocm:
    runs-on: ${{ vars.DEFAULT_RUNNER || 'ubuntu-latest' }}
    outputs:
      ocm-repository:  ${{ steps.params.outputs.ocm-repository }}
      ocm-releases-repository:  ${{ steps.params.outputs.ocm-releases-repository }}
      ocm-repositories:  ${{ steps.params.outputs.ocm-repositories }}
      oci-registry:  ${{ steps.params.outputs.oci-registry }}
      is-fork:  ${{ steps.params.outputs.is-fork }}
      is-pr-from-fork:  ${{ steps.params.outputs.is-pr-from-fork }}
      can-push:  ${{ steps.params.outputs.can-push }}
      version: ${{ steps.version.outputs.version }}
      commit-digest: ${{ steps.version.outputs.commit-digest }}
      component-descriptor: ${{ steps.component-descriptor.outputs.component-descriptor }}
    steps:
      - name: params
        id: params
        uses: gardener/cc-utils/.github/actions/params@master
        with:
          mode: ${{ inputs.mode }}
          gh-token: ${{ secrets.GITHUB_TOKEN }}
          oci-registry-prefix: ${{ inputs.oci-registry-prefix }}
          snapshots-suffix: ${{ inputs.snapshots-suffix }}
          releases-suffix: ${{ inputs.releases-suffix }}
          ocm-repositories: ${{ inputs.ocm-repositories }}
      - uses: gardener/cc-utils/.github/actions/trusted-checkout@master
        with:
          fetch-depth: ${{ inputs.checkout-fetch-depth }}
          submodules: ${{ inputs.checkout-submodules }}
          auth-app-client-id: ${{ vars.GARDENER_GITHUB_ACTIONS_APP_ID }}
          auth-app-private-key: ${{ secrets.GARDENER_GITHUB_ACTIONS_PRIVATE_KEY }}
      - name: preprocess-params
        id: pre
        run: |
          mode="${{ inputs.mode }}"
          if [ ${mode} == "release" ]; then
            prerelease=''
            commit_msg='release ${version}'
          elif [ ${mode} == "snapshot" ]; then
            prerelease='${commit_digest}'
            commit_msg='build ${version}'
          else
            echo "unknown mode: ${mode}"
            exit 1
          fi
          echo "prerelease=${prerelease}" >> ${GITHUB_OUTPUT}
          echo "commit-message=${commit_msg}" >> ${GITHUB_OUTPUT}
      - uses: gardener/cc-utils/.github/actions/version@master
        id: version
        name: create-release-commit
        with:
          prerelease: ${{ steps.pre.outputs.prerelease }}
          commit-message: ${{ steps.pre.outputs.commit-message }}
          commit-objects-artefact: release-commit-objects
          callback-action-path: ${{ inputs.version-commit-callback-action-path }}
          callback-command: |
            release_notes_path="${{ inputs.release-notes-path }}"
            release_notes_path="${release_notes_path%/}/" # ensure trailing "/"

            release_notes_files=$(git ls-tree ${{ github.sha }} ${release_notes_path} --name-only)

            for file in $release_notes_files; do
              if [[ -f "${file}" && "${file}" == *.release-notes.yaml ]]; then
                # insert version at the beginning so that existing versions take precedence
                sed -i "1i reference_version: ${EFFECTIVE_VERSION}" "${file}"
              fi
            done
          versionfile: ${{ inputs.versionfile }}
          version-operation: ${{ inputs.version-operation }}
          commit-kind: ${{ inputs.mode == 'release' && 'release' || 'build' }}
      - uses: gardener/cc-utils/.github/actions/base-component-descriptor@master
        id: component-descriptor
        with:
          base-component: ${{ inputs.base-component-file }}
          version: ${{ steps.version.outputs.version }}
          ocm-repository: ${{ steps.params.outputs.ocm-repository }}
          commit-digest: ${{ steps.version.outputs.commit-digest }}
          post-process: ${{ inputs.post-process }}
      - name: prepare-artefact
        run: |
          set -eu

          p=prepare-values.d
          mkdir $p

          # params
          echo "${{ steps.params.outputs.ocm-repository }}" > $p/ocm-repository
          echo "${{ steps.params.outputs.ocm-releases-repository }}" > $p/ocm-releases-repository
          echo "${{ steps.params.outputs.ocm-repositories }}" > $p/ocm-repositories
          echo "${{ steps.params.outputs.oci-registry }}" > $p/oci-registry
          echo "${{ steps.params.outputs.is-fork }}" > $p/is-fork
          echo "${{ steps.params.outputs.is-pr-from-fork }}" > $p/is-pr-from-fork
          echo "${{ steps.params.outputs.can-push }}" > $p/can-push

          # version-and-ocm
          echo "${{ steps.version.outputs.version }}" > $p/version
          echo "${{ steps.version.outputs.commit-digest }}" > $p/commit-digest
          cat <<EOF > $p/component-descriptor
          ${{ steps.version.outputs.component-descriptor }}
          EOF

          tar cf "${{ inputs.output-artefact-filename }}" $p
          tar tf "${{ inputs.output-artefact-filename }}" # debug

      - uses: gardener/cc-utils/.github/actions/upload-artifact@master
        with:
          name: ${{ inputs.output-artefact }}
          path: ${{ inputs.output-artefact-filename }}
