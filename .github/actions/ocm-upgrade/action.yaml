name: OCM-Upgrade
description: |
  An action creating upgrade-pullrequests for referenced OCM-Components.

  The action will firstly try to locate the "base-component" descriptor (`.ocm/base-component.yaml`).
  If it exists, diffs for matching component-references will be created. In addition, the optional
  `.ci/set_dependency_version`-callback will be called.

  The latter callback is passed the following environment variables:
    - DEPENDENCY_TYPE (always `component` - reserved for later extension)
    - DEPENDENCY_NAME (the component-name to be upgraded)
    - DEPENDENCY_VERSION (the target-version of component to be upgraded)

  For backwards-compatibility-reasons, in addition, the environment variable `REPO_DIR`, pointing to
  repository-worktree will be set. However, set_dependency_version callback-scripts should not rely
  on it, and consider it deprecated.

  If a component-upgrade cannot be done using "base-component", the `set_dependency_version` script
  is _not_ optional (absence is in that case reported as an error).

  Use `prepare-action-path` in case `set_dependency_version` needs additional setup (e.g. to install
  golang toolchain).

inputs:
  component-descriptor:
    description: |
      The effective OCM-Component-Descriptor based on which Upgrade-Pullrequests should be
      created.
    type: string
    required: true
  ocm-repositories:
    description: |
      A comma-separated list of OCM-Repositories that should be used to lookup Component-Versions.
    required: true
  github-token:
    description: |
      auth-token used for pushing upgrade-pullrequest-commit and for creating PullRequests.
    type: string
    required: true
  merge-policy:
    description: |
      Controls what should happen to newly created upgrade-pullrequests.
    type: choice
    default: manual
    options:
      - automerge
      - manual
  merge-method:
    description: |
      Sets the merge-method (only used if merge-policy is set to automerge)
    type: choice
    default: merge
    options:
      - rebase
      - merge
      - squash
  prepare-action-path:
    description: |
      Path (relative to repository-root) to a local action. If given, this action will be called
      prior to running `.ci/set_dependency_version` callback script. Useful to install preliminaries
      required by said callback-script.
    type: string
    required: false
  upstream-component-name:
    description: Upstream component name to gate against
    type: string
    required: false
    default: ""
  upstream-update-policy:
    description: Upstream policy
    type: choice
    options:
      - strictly-follow
      - accept-hotfixes
    default: strictly-follow
  pr-naming-pattern:
    description: |
      Pattern to use for naming the created pull requests. Allowed values are:
        - component-name: Use the component name (default behavior)
        - reference-name: Use the component reference name. This allows for having multiple references to the same component but with different names and puposes (e.g. testing and production)
    type: choice
    options:
      - component-name
      - reference-name
    default: component-name

runs:
  using: composite
  steps:
    - uses: gardener/cc-utils/.github/actions/install-gardener-gha-libs@master
    - uses: actions/checkout@v4
      with:
        token: ${{ inputs.github-token }}
    - uses: gardener/cc-utils/.github/actions/setup-git-identity@master
    - name: write-component-descriptor
      shell: bash
      run: |
        cat <<EOF > /tmp/component-descriptor.yaml
        ${{ inputs.component-descriptor }}
        EOF
        cat <<EOF > /tmp/ocm-repositories
        ${{ inputs.ocm-repositories }}
        EOF
        cat <<EOF > /tmp/github-token
        ${{ inputs.github-token }}
        EOF
    - name: prepare-action
      if: ${{ inputs.prepare-action-path != '' }}
      shell: bash
      run: |
        set -eu
        # cp outside of repository-tree so we do not have to cleanup afterwards; also, we need a
        # static path, as github-actions do not allow using parameters
        cp -r "${{ inputs.prepare-action-path }}" ../prepare-action
    - name: call-prepare-action
      if: ${{ inputs.prepare-action-path != '' }}
      uses: ./../prepare-action
    - name: authenticate-against-oci-registry
      uses: gardener/cc-utils/.github/actions/oci-auth@master
      with:
        oci-image-reference: ${{ inputs.ocm-repositories }} # only the first entry will be used
        gh-token: ${{ github.server_url == 'https://github.com' && inputs.github-token || '' }} # only try to authenticate for gh-com
    - name: create-and-update-upgrade-pullrequests
      shell: python
      run: |
        import os
        import sys

        sys.path.insert(1, os.environ['GITHUB_ACTION_PATH'])

        import logging

        import yaml

        import github
        import github.pullrequest
        import ocm
        import ocm.gardener

        import ocm_upgrade

        logging.basicConfig(stream=sys.stderr, level=logging.INFO)
        logger = logging.getLogger('upgrade-ocm')

        # silence annoying loggers
        logging.getLogger('github3').setLevel(logging.WARN)
        logging.getLogger('urllib3').setLevel(logging.WARN)

        with open('/tmp/component-descriptor.yaml') as f:
          raw = yaml.safe_load(f)

        component_descriptor = ocm.ComponentDescriptor.from_dict(raw)
        component = component_descriptor.component

        with open('/tmp/ocm-repositories') as f:
          ocm_repositories = f.read().strip().split(',')

        logger.info(f'{ocm_repositories=}')

        oci_client, component_descriptor_lookup, version_lookup = ocm_upgrade.create_ocm_lookups(
          ocm_repositories=ocm_repositories,
        )

        merge_method = '${{ inputs.merge-method }}'
        merge_policy = '${{ inputs.merge-policy }}'
        if merge_policy == 'automerge':
          auto_merge = True
        elif merge_policy == 'manual':
          auto_merge = False
        else:
          raise ValueError(f'unexpected {merge_policy=}')

        with open('/tmp/github-token') as f:
          github_token = f.read().strip()

        host, org, repo = github.host_org_and_repo()
        github_api = github.github_api(token=github_token)
        repository = github_api.repository(org, repo)

        repo_dir = os.getcwd()

        logger.info('retrieving existing upgrade-pull-requests')

        upgrade_pullrequests = list(
          github.pullrequest.iter_upgrade_pullrequests(
            repository=repository,
            state='all',
            reference_component=component,
          )
        )

        logger.info(f'found {len(upgrade_pullrequests)=}')
        upstream_component = '${{ inputs.upstream-component-name }}'.strip() or None
        upstream_update_policy = ocm_upgrade.UpstreamUpdatePolicy(
          '${{ inputs.upstream-update-policy }}'.strip()
        )

        created_upgrade_pullrequests = tuple(
          ocm_upgrade.create_upgrade_pullrequests(
            component=component,
            component_descriptor_lookup=component_descriptor_lookup,
            version_lookup=version_lookup,
            upgrade_pullrequests=upgrade_pullrequests,
            repo_dir=repo_dir,
            repo_url=f'https://{host}/{org}/{repo}',
            repository=repository,
            auto_merge=auto_merge,
            merge_method=merge_method,
            branch='${{ github.ref_name }}',
            oci_client=oci_client,
            upstream_component_name=upstream_component,
            upstream_update_policy=upstream_update_policy,
            ignore_prerelease_versions=True,
            pr_naming_pattern='${{ inputs.pr-naming-pattern }}'
          )
        )

        upgrade_pullrequests.extend(created_upgrade_pullrequests)

        for obsolete_pullrequest in github.pullrequest.iter_obsolete_upgrade_pull_requests(
          upgrade_pull_requests=upgrade_pullrequests,
          keep_hotfix_versions=True,
          pr_naming_pattern='${{ inputs.pr-naming-pattern }}'
        ):
          obsolete_pullrequest.purge()

        summary = f'''\
        ## Upgrade-Dependencies-Summary

        Found {len(upgrade_pullrequests)=}.
        Created {len(created_upgrade_pullrequests)=}.
        '''

        with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
          f.write(summary)
