name: release
description: |
  An opinionated release-Action for creating releases adhering to conventions established within
  Gardener-CICD.

  This actions assumes the version to be released is contained within passed
  OCM-Component-Descriptor. It also assumes a commit containing code-changes for said release was
  created upfront (as output by `capture-commit` action).

  Releases encompass:
  - publishing of OCM Component-Descriptor
  - pushing of a release-tag (pointing to release-commit)
  - creating of a github-release (including release-notes + release-assets)
  - pushing of "bump-commit" (to current branch)

inputs:
  component-descriptor:
    description: |
      Effective Component-Descriptor to publish. Any local-blobs are assumed to already be
      present in target-OCI-Repository.
    required: true
  component-descriptor-blobs-dir:
    description: |
      Directory containing blobfiles referenced as local-blobs in component-descriptor
      (name-scheme: <algorithm>:<hexdigest>).
    required: false
  release-commit-objects:
    description: |
      release-commit in serialised form (as output by `capture-commit` action)

      Either this input, or `release-commit-objects-artefact` must be passed.
    required: false
  release-commit-objects-artefact:
    description: |
      name of artefact (as published from capture-commit action) to use.
    required: false
  release-commit-digest:
    description: |
      release-commit-digest (necessary, unless capture-commit's special-ref is not present)
  release-commit-target:
    type: choice
    description: |
      controls where to push release-commit (and tag) to. Using `tag` option is safest, as it is
      guaranteed to succeed, also if current branch's head change during build. As release-commit
      should ideally not change (as it is referenced, e.g. in Component-Descriptor), if using
      `branch` option, merging back to current branch is attempted (instead of rebase).
      tag: push to tag (outside of current branch)
      branch: push to current branch (attempt merge if needed)
    default: tag
    options:
      - tag
      - branch
  next-version:
    type: string
    description: |
      passed to `version` action as `version-operation`. see this action for documentation
    required: false
    default: bump-minor
  next-version-commit-message:
    type: string
    description: |
      passed to `version` action as `commit-message`. see this action for documentation
    required: false
    default: 'next version: ${version}'
  next-version-callback-action-path:
    type: string
    required: false
    description: |
      passed to `version` action as `callback-action-path`
  version-read-callback:
    type: string
    description: |
      passed to `version` action as `read-callback`. see this action for documentation
    required: false
  version-write-callback:
    type: string
    description: |
      passed to `version` action as `write-callback`. see this action for documentation
    required: false
  version-versionfile:
    type: string
    description: |
      passed to `version` action as `versionfile`. see this action for documentation
  release-notes:
    description: |
      the release-notes to publish as body for GitHub-Release (release-notes action might be
      handy to collect those)
    required: false
  github-token:
    description: |
      the github-auth-token to use for authenticating against GitHub and OCI-Registry.
      Use `secrets.GITHUB_TOKEN`
    required: true
  git-push-token:
    description: |
      an auth-token to use for pushing release- and bump-commits. Must grant the privilege to
      bypass branch-protection-rules, if present.
    required: false

defaults:
  run:
    shell: bash

runs:
  using: composite
  steps:
    - name: install-gardener-gha-libs
      uses: gardener/cc-utils/.github/actions/install-gardener-gha-libs@master
    - uses: actions/checkout@v4
      with:
        token: ${{ inputs.git-push-token || inputs.github-token }}
    - name: import-release-commit
      uses: gardener/cc-utils/.github/actions/import-commit@master
      with:
        commit-objects-artefact: ${{ inputs.release-commit-objects-artefact }}
        commit-objects: ${{ inputs.release-commit-objects }}
        commit-digest: ${{ inputs.release-commit-digest }}
        after-import: rebase
    - uses: gardener/cc-utils/.github/actions/setup-git-identity@master
    - name: preprocess
      id: preprocess
      shell: bash
      run: |
        # pass to next steps
        echo "${{ inputs.component-descriptor }}" > /tmp/component-descriptor.yaml
        version=$(yq .component.version /tmp/component-descriptor.yaml)
        echo "version=${version}" >> $GITHUB_OUTPUT
        tag_name="${version}"
        tag_ref="refs/tags/${tag_name}"
        echo "tag-ref=${tag_ref}" >> $GITHUB_OUTPUT
        echo "tag-name=${tag_name}" >> $GITHUB_OUTPUT

    - name: read-target-oci-ref
      id: read-oci-ref
      shell: python
      run: |
        import os

        import yaml

        import ocm

        with open('/tmp/component-descriptor.yaml') as f:
          component_descriptor = ocm.ComponentDescriptor.from_dict(
            yaml.safe_load(f.read())
          )
        component = component_descriptor.component
        tgt_ocm_repo = component.current_ocm_repo
        tgt_oci_ref = tgt_ocm_repo.component_version_oci_ref(
          name=component.name,
          version=component.version,
        )
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
          f.write(f'ocm-target-oci-ref={tgt_oci_ref}\n')


    - name: authenticate-against-oci-registry
      uses: gardener/cc-utils/.github/actions/oci-auth@master
      with:
        oci-image-reference: ${{ steps.read-oci-ref.outputs.ocm-target-oci-ref }}
        gh-token: ${{ inputs.github-token }}

    - name: attach-release-notes-to-component-descriptor
      if: ${{ inputs.release-notes }}
      shell: python
      run: |
        import dataclasses
        import hashlib
        import json

        import yaml

        import oci.client
        import oci.auth
        import ocm

        with open('/tmp/component-descriptor.yaml') as f:
          component_descriptor = ocm.ComponentDescriptor.from_dict(
            yaml.safe_load(f.read())
          )
        component = component_descriptor.component
        tgt_ocm_repo = component.current_ocm_repo
        tgt_oci_ref = tgt_ocm_repo.component_version_oci_ref(
          name=component.name,
          version=component.version,
        )

        oci_client = oci.client.Client(
          credentials_lookup=oci.auth.docker_credentials_lookup(),
        )

        release_notes_markdown = '''${{ inputs.release-notes }}'''
        release_notes_octets = release_notes_markdown.encode('utf-8')
        release_notes_digest = f'sha256:{hashlib.sha256(release_notes_octets).hexdigest()}'

        oci_client.put_blob(
          image_reference=tgt_oci_ref,
          digest=release_notes_digest,
          octets_count=len(release_notes_octets),
          data=release_notes_octets,
        )

        component.resources.append(
          ocm.Resource(
            name='release-notes',
            version=component.version,
            type='text/markdown.release-notes',
            access=ocm.LocalBlobAccess(
              localReference=release_notes_digest,
              size=len(release_notes_octets),
              mediaType='text/markdown.release-notes',
            ),
          ),
        )

        # pass modified component-descriptor to subsequent steps
        with open('/tmp/component-descriptor.yaml', 'w') as f:
          yaml.dump(
            data=dataclasses.asdict(component_descriptor),
            Dumper=ocm.EnumValueYamlDumper,
            stream=f,
          )

    - name: publish OCM Component-Descriptor
      shell: bash
      run: |
        python -m ocm upload \
          --file /tmp/component-descriptor.yaml \
          --blobs-dir '${{ inputs.component-descriptor-blobs-dir }}'

    - name: push release-tag
      shell: bash
      run: |
        set -eu

        orig_ref="$(git rev-parse @)"
        push_spec="@:${{ steps.preprocess.outputs.tag-ref }}"
        echo "pushing release-commit using ${push_spec}"
        git push origin "${push_spec}"

        case "${{ inputs.release-commit-target }}" in
          tag)
          echo "chose to not push tag to source-branch: exiting now"
          exit 0
          ;;
          branch)
          echo "will try to push against ${{ github.ref }}"
          # fall-through (there is only error-case ahead)
          ;;
          *)
          echo "error - don't know how to handle release-commit-target:"
          echo "${{ inputs.release-commit-target }}"
          exit 1
          ;;
        esac

        # `branch`-case: we try to also push release-commit to branch that triggered us.
        #                if that fails (due to concurrent head-update), we will try to do a
        #                merge.

        push_spec="@:${{ github.ref }}"
        echo "trying to push release-commit using ${push_spec}"
        if git push origin "${push_spec}"; then
          echo "Successfully pushed release-commit to ${{ github.ref }}"
          exit 0
        fi

        version="${{ steps.preprocess.outputs.version }}"
        echo "we failed to push release-commit to ${{ github.ref }} - trying to merge"
        git fetch origin "${{ github.ref }}"
        git checkout -B "${{ github.ref_name }}" FETCH_HEAD
        if git merge "${orig_ref}" -m "merge back from release ${version}"; then
          git push origin "@:${{ github.ref }}"
          exit 0
        else
          echo "Warning: failed to merge release-commit back to ${{ github.ref }}"
          echo "release will continue as tag was successfully pushed"
          # abort merge
          rm -f .git/MERGE_HEAD
          git reset --hard FETCH_HEAD
          git checkout -B "${{ github.ref_name }}"
          # at this point, repository should have clean checkout of source-branch, pointing to
          # head-commit (discarding previous failed merge-attempt + also release-commit)
          # -> this should be okay:
          #   - tag was pushed
          #   - we still might succeed in publishing bump-commit
        fi

    - name: create github-release
      shell: python
      run: |
        import os

        import github3

        import github.release

        host = os.environ['GITHUB_SERVER_URL'].removeprefix('https://')
        org, repo = os.environ['GITHUB_REPOSITORY'].split('/')

        token = '${{ inputs.github-token }}'
        if host == 'github.com':
          github_api = github3.GitHub(token=token)
        else:
          github_api = github3.GitHubEnterprise(
            url=f'https://{host}',
            token=token,
          )

        repository = github_api.repository(org, repo)


        release_notes_markdown = '''\
        ${{ inputs.release-notes }}
        '''

        release_tag_name = '${{ steps.preprocess.outputs.tag-name }}'
        draft_tag_name = f'{release_tag_name}-draft'

        if not (gh_release := github.release.find_draft_release(
          repository=repository,
          name=draft_tag_name,
        )):
          repository.create_release(
            tag_name=release_tag_name,
            body=release_notes_markdown or 'no release-notes available',
            draft=False,
            prerelease=False,
          )
        else:
          gh_release.edit(
            tag_name=release_tag_name,
            name=release_tag_name,
            body=release_notes_markdown or 'no release-notes available',
            draft=False,
            prerelease=False,
          )

    - name: prepare-push-bump-commit
      shell: bash
      run: |
        # reset back to (current) head of branch for which release-job was started
        # (this will avoid merge-conflicts)
        git fetch origin "${{ github.ref }}"
        git rebase

    - name: create-bump-commit
      id: bump
      uses: gardener/cc-utils/.github/actions/version@master
      with:
        read-callback: ${{ inputs.version-read-callback }}
        write-callback: ${{ inputs.version-write-callback }}
        version-operation: ${{ inputs.next-version }}
        callback-action-path: ${{ inputs.next-version-callback-action-path }}
        prerelease: 'dev'
        commit-message: ${{ inputs.next-version-commit-message }}
        repository-operation: commit-to-head

    - name: push-bump-commit
      shell: bash
      run: |
        git push origin "${{ github.ref }}"
