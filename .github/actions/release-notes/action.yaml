name: release-notes
description: |
  retrieves release-notes following conventions from Gardener-Project

inputs:
  component-descriptor:
    description: |
      effective OCM component-descriptor. It is sufficient to pass a `base component-descriptor`,
      as output by `base-component-descriptor` workflow. Its version must be set to next planned
      version (e.g. `1.2.0-dev`, if greatest released version was `1.1.0`).
    required: true
  ocm-repositories:
    description: |
      a (commaseparated) list of ocm-repository-URLs where component-versions are to be looked up
      (order is honoured).

      Caveat: this action will only honour final versions. Hence, at least one ocm-repository
      containing final/release versions must be passed.

      If no ocm-repository is passed, this action will fallback to the current ocm-repository from
      passed ocm-component-descriptor (see caveat above).
  github-token:
    description: |
      the github-auth-token to use for authenticating against GitHub.
      Use `secrets.GITHUB_TOKEN`. If not passed-on via input, env-var GITHUB_TOKEN will be
      honoured
  draft:
    type: boolean
    default: false
    description: |
      if true, will collect draft-release-notes
outputs:
  release-notes:
    description: |
      the collected release-notes in markdown format (only for current component)
    value: ${{ steps.release-notes.outputs.release-notes }}
  full-release-notes:
    description: |
      In addition to `release-notes`, also contains release-notes of sub-components. If there
      are no such components, has the same value as `release-notes`.
    value: ${{ steps.relase-notes.outputs.full-release-notes }}

runs:
  using: composite
  steps:
    - name: install-gardener-gha-libs
      uses: gardener/cc-utils/.github/actions/install-gardener-gha-libs@master
    - name: checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # release-notes code needs full commit-history and tags
        fetch-tags: 0
    - uses: gardener/cc-utils/.github/actions/setup-git-identity@master
    - name: Retrieve Release-Notes
      id: release-notes
      shell: bash
      run: |
        set -eu

        cat <<EOF > component-descriptor.yaml
        ${{ inputs.component-descriptor }}
        EOF

        echo 'Component-Descriptor:'
        cat component-descriptor.yaml

        auth_token="${{ inputs.github-token }}"

        if [ -z "${auth_token:-}" ]; then
          auth_token="${GITHUB_TOKEN}"
        fi

        if [ "${{ inputs.draft }}" == 'true' ]; then
          draft_arg='--draft'
        fi

        if [ -n "${{ inputs.ocm-repositories }}" ]; then
          ocm_repositories_arg="--ocm-repositories ${{ inputs.ocm-repositories }}"
        fi

        echo 'Fetching release-notes'
        "${GITHUB_ACTION_PATH}/release_notes_cli.py" \
          --component-descriptor component-descriptor.yaml \
          --github-auth-token "${auth_token}" \
          ${draft_arg:-} \
          ${ocm_repositories_arg:-} \
          --full-release-notes full-release-notes.md \
          --local-release-notes release-notes.md

        echo 'Full Release-notes written to `full-release-nodes.md`'
        echo 'Local Release-notes written to `release-notes.md`'

        echo 'release-notes<<EOF' >> ${GITHUB_OUTPUT}
        cat release-notes.md >> ${GITHUB_OUTPUT}
        echo EOF >> ${GITHUB_OUTPUT}

        echo 'full-release-notes<<EOF'
        cat full-release-notes.md > ${GITHUB_OUTPUT}
        echo EOF >> ${GITHUB_OUTPUT}

        cat << EOF > ${GITHUB_STEP_SUMMARY}
        ## Release-Notes (local)
        $(cat release-notes.md)
        EOF
