name: Authenticate against OCI-Registries
description: |
  An opinionated action capable of authenticating against either ghcr.io (github's oci registry),
  or Google-Artifact-Registry.

  Contains hardcoded defaults for GAR for OIDC-auth against `gardener-project`-GCP-Project.
  Permissions are pre-configured for GitHub-Actions running for repositories below
  github.com/gardener organisation, only.

  Specifically for forks (but also for other pipelines, where usage of GHCR is preferred), the
  action also allows authentication against GHCR (gh-token must be passed in from
  `secrets.GITHUB_TOKEN`).

  For convenience, the correct authentication method is derived from passed-in
  `oci-image-reference` (this is especially useful for workflows that should work both for
  repositories below gardener-org, and for forks, where different push-targets are configured).

  parameters specific to GAR are prefixed w/ `gcp-`, whereas parameters specific to GHCR are
  prefixed w/ `gh-`.

inputs:
  gcp-service-account:
    description: The GCP-Service-Account to impersonate
    required: false
    default: ci-opensource-operator@gardener-project.iam.gserviceaccount.com
  gcp-workload-identity-provider:
    description: |
       GCP Workload Identity Provider. Default is configured for GitHub-Actions for
       github.com/gardener organisation.
    required: false
    default: projects/694386720375/locations/global/workloadIdentityPools/github-actions/providers/github-actions-provider
  gcp-project:
    description: |
      The GCP Project to authenticate against
    required: false
    default: gardener-project
  gh-token:
    description: |
      The token from GitHub-Action (secrets.GITHUB_TOKEN).
    required: false
  oci-image-reference:
    required: true
    description: |
      The OCI-Image-Reference specifying the OCI-Registry to authenticate against. Must encompass
      at least a hostname.
    default: europe-docker.pkg.dev

outputs:
  access-token:
    description: |
      The obtained access-token (if authenticating against GHCR, this is identical to passed-in
      token)
    value: ${{ steps.export.outputs.access-token }}
  docker-cfg:
    description: |
      A $HOME/.docker/config.json containing the token (for convenience)
    value: ${{ steps.export.outputs.docker-cfg }}

runs:
  using: composite
  steps:
    - name: determine-target
      id: tgt
      shell: bash
      run: |
        set -eu
        netloc=$(echo "${{ inputs.oci-image-reference }}" | cut -d/ -f1)

        if [[ "${netloc}" == *.pkg.dev ]]; then
          rtype=gcp
        elif [[ "${netloc}" == ghcr.io ]]; then
          rtype=ghcr
        else
          echo "error: failed to determine registry-type for ${netloc}"
          exit 1
        fi

        echo "rtype=${rtype}" >> ${GITHUB_OUTPUT}
        echo "netloc=${netloc}" >> ${GITHUB_OUTPUT}

    - name: gcp-auth
      if: ${{ steps.tgt.outputs.rtype == 'gcp' }}
      id: gcp-auth
      uses: google-github-actions/auth@v2
      with:
        token_format: access_token
        project_id: ${{ inputs.gcp-project }}
        service_account: ${{ inputs.gcp-service-account }}
        workload_identity_provider: ${{ inputs.gcp-workload-identity-provider }}

    - name: Export Access-Token and docker-cfg
      id: export
      shell: bash
      run: |
        set -eu
        rtype=${{ steps.tgt.outputs.rtype }}
        case ${rtype} in
          gcp)
          orig_username="${{ inputs.gcp-service-account }}"
          username=oauth2accesstoken
          password=${{ steps.gcp-auth.outputs.access_token }}
          ;;
          ghcr)
          username=${{ github.actor }}
          orig_username="${username}"
          password="${{ inputs.gh-token }}"
          if [ -z "${password}" ]; then
            echo "error: no github-token was passed-in"
            exit 1
          fi
          ;;
          *)
          echo "error: do not know registry-type: ${rtype}"
          exit 1
          ;;
        esac

        token=$(echo -n ${username}:${password} | base64 -w0)
        mkdir -p $HOME/.docker
        docker_cfg_path="${HOME}/.docker/config.json"
        netloc=${{ steps.tgt.outputs.netloc }}

        cat << EOF > ${docker_cfg_path}
        {
          "auths": {
            "${netloc}": {
              "auth": "${token}"
            }
          }
        }
        EOF
        docker_cfg="$(cat "${docker_cfg_path}" | tr -d "\n")"

        echo "docker-cfg=${docker_cfg}" >> ${GITHUB_OUTPUT}
        echo "access-token=${token}" >> ${GITHUB_OUTPUT}

        cat << EOF > ${GITHUB_STEP_SUMMARY}
        ## OCI-Auth Summary
        authenticated against: \`${netloc}\`
        user: \`${orig_username}\`
        type: \`${rtype}\`
        docker-cfg written to: \`${docker_cfg_path}\`
        EOF
