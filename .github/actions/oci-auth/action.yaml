name: Authenticate against OCI-Registries
description: |
  An opinionated action capable of authenticating against either ghcr.io (github's oci registry),
  or Google-Artifact-Registry.

  Contains hardcoded defaults for GAR for OIDC-auth against `gardener-project`-GCP-Project.
  Permissions are pre-configured for GitHub-Actions running for repositories below
  github.com/gardener organisation, only.

  Specifically for forks (but also for other pipelines, where usage of GHCR is preferred), the
  action also allows authentication against GHCR (gh-token must be passed in from
  `secrets.GITHUB_TOKEN`).

  For convenience, the correct authentication method is derived from passed-in
  `oci-image-reference` (this is especially useful for workflows that should work both for
  repositories below gardener-org, and for forks, where different push-targets are configured).

  parameters specific to GAR are prefixed w/ `gcp-`, whereas parameters specific to GHCR are
  prefixed w/ `gh-`.

inputs:
  gcp-service-account:
    description: The GCP-Service-Account to impersonate
    required: false
    default: ci-gcr-operator@gardener-project.iam.gserviceaccount.com
  gcp-workload-identity-provider:
    description: |
       GCP Workload Identity Provider. Default is configured for GitHub-Actions for
       github.com/gardener organisation.
    required: false
    default: projects/694386720375/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions
  gcp-project:
    description: |
      The GCP Project to authenticate against
    required: false
    default: gardener-project
  gh-token:
    description: |
      The token from GitHub-Action (secrets.GITHUB_TOKEN).
    required: false
  oci-image-reference:
    required: true
    description: |
      The OCI-Image-Reference specifying the OCI-Registry to authenticate against. Must encompass
      at least a hostname.
    default: europe-docker.pkg.dev
  extra-auths:
    required: false
    description: |
      A JSON-Document containing a mapping of additional auth-cfgs of the following form:
      { <host>: {"auth": <token>}}

      example:
      ```
      {"registry-1.docker.io": {"auth": "abcd"}}
      ```
      Passed tokens will be _appended_ to resulting docker-cfg, and thus have precedence.
  print-summary:
    default: false
    type: boolean
    description: |
      If set to `true`, the action will print a summary about authentication result, as well as
      additional output, such as written files.

outputs:
  access-token:
    description: |
      The obtained access-token (if authenticating against GHCR, this is identical to passed-in
      token)
    value: ${{ steps.export.outputs.access-token }}
  docker-cfg:
    description: |
      A $HOME/.docker/config.json containing the token (for convenience)
    value: ${{ steps.export.outputs.docker-cfg }}

runs:
  using: composite
  steps:
    - name: determine-target
      id: tgt
      shell: bash
      run: |
        set -eu
        netloc=$(echo "${{ inputs.oci-image-reference }}" | cut -d/ -f1)

        if [[ "${netloc}" == *.pkg.dev ]]; then
          rtype=gcp
        elif [[ "${netloc}" == ghcr.io ]]; then
          rtype=ghcr
        else
          echo "error: failed to determine registry-type for ${netloc}"
          exit 1
        fi

        echo "rtype=${rtype}" >> ${GITHUB_OUTPUT}
        echo "netloc=${netloc}" >> ${GITHUB_OUTPUT}

    - name: preprocess-gcp-auth
      if: ${{ steps.tgt.outputs.rtype == 'gcp' }}
      id: gcp
      shell: bash
      run: |
       set -euo pipefail
       if ${GITHUB_ACTION_PATH}/find-cfg.py \
        ${{ inputs.oci-image-reference }} \
          --server-url ${{ github.server_url }} \
          --repository ${{ github.repository }} \
          --outfile ${GITHUB_OUTPUT}; then
          exit 0
       fi

       # fallback
       cat <<EOF >> ${GITHUB_OUTPUT}
       project-id=${{ inputs.gcp-project }}
       service-account=${{ inputs.gcp-service-account }}
       workload-identity-provider=${{ inputs.gcp-workload-identity-provider }}
       EOF

    - name: gcp-auth
      if: ${{ steps.tgt.outputs.rtype == 'gcp' }}
      id: gcp-auth
      uses: google-github-actions/auth@v2
      with:
        token_format: access_token
        project_id: ${{ steps.gcp.outputs.project-id }}
        service_account: ${{ steps.gcp.outputs.service-account }}
        workload_identity_provider: ${{ steps.gcp.outputs.workload-identity-provider }}
        create_credentials_file: false

    - name: Export Access-Token and docker-cfg
      id: export
      shell: python
      run: |
        import os
        import sys
        sys.path.insert(1, os.environ['GITHUB_ACTION_PATH'])

        import base64
        import json
        import textwrap

        registry_type = '${{ steps.tgt.outputs.rtype }}'

        if registry_type == 'gcp':
          orig_username = '${{ inputs.gcp-service-account }}'
          username = 'oauth2accesstoken'
          password = '${{ steps.gcp-auth.outputs.access_token }}'
        elif registry_type == 'ghcr':
          username = '${{ github.actor }}'
          orig_username = username
          password = '${{ inputs.gh-token }}'
          if not password:
            print('Error: no github-token was passed-in')
            exit(1)
        else:
          print(f'Error: unknown {registry_type=}')
          exit(1)

        token = base64.b64encode(f'{username}:{password}'.encode('utf-8')).decode('utf-8')
        netloc = '${{ steps.tgt.outputs.netloc }}'

        auths = {
          netloc: {
            'auth': token,
          },
        }

        docker_cfg = {
          'auths': auths,
        }

        extra_auths = '''
        ${{ inputs.extra-auths }}
        '''.strip()

        if extra_auths:
          extra_auths = json.loads(extra_auths)
          if not isinstance(extra_auths, dict):
            print(f'expected a dict for extra-auths, but got: {type(extra_auths)=}')
            exit(1)

          docker_cfg['auths'] |= extra_auths

          extra_auth_netlocs = tuple(extra_auths.keys())
        else:
          extra_auth_netlocs = ()

        docker_cfg_dir = os.path.join(os.environ['HOME'], '.docker')
        docker_cfg_path = os.path.join(docker_cfg_dir, 'config.json')

        os.makedirs(docker_cfg_dir, exist_ok=True)
        with open(docker_cfg_path, 'w') as f:
          json.dump(docker_cfg, f)

        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
          f.write(f'docker-cfg={json.dumps(docker_cfg)}\n')
          f.write(f'access-token={token}\n')

        if '${{ inputs.print-summary }}' == 'false':
          exit(0)

        with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
          f.write(textwrap.dedent(f'''\
          ## OCI-Auth Summary
          authenticated against: `{netloc}`
          user: `{orig_username}`
          type: `{registry_type}`
          docker-cfg written to: `{docker_cfg_path}`
          extra-auth-netlocs: `{extra_auth_netlocs}`
          '''))
