name: merge-ocm-fragments
description: |
  Imports OCM-fragments (as exported from `export-ocm-fragments` action), and a
  base-OCM-Component-Descriptor, and merges them into a resulting OCM-Component-Descriptor.

  The output-directory (`outdir`) will be populated like so:

  ```
  component-descriptor.yaml
  blobs.d/<alg>:<hexdigest>
  ```

  `component-descriptor.yaml` will contain merged contents from all imported ocm-artefact-fragments,
  as well as any contents from passed `component-descriptor`, whereas `blobs.d` will contain
  combined imported blob-files (if any).

inputs:
  component-descriptor:
    required: false
    type: string
    description: |
      The (base) component-descriptor to merge ocm-fragments into. If it is not passed, a minimal
      one will be created.
  component-descriptor-artefact:
    required: false
    type: string
    description: |
      If passed, the passed name is assumed to refer to an (existing) artefact of this name,
      containing a (base) component-descriptor, as output by the `base-component-descriptor`
      action.

      I.e. it must contain (at least) a file named `component-descriptor.tar.gz`, which in turn
      must (at least) contain a file `component-descriptor.yaml`, which is used as base
      component-descriptor.
  ctx:
    required: false
    type: string
    description: |
      an optional ctx used for filtering which ocm-fragment-artefacts to import.
      counterpart to `import-ocm-fragments`'s `ctx`-input.

  outdir:
    required: false
    type: string
    default: /tmp/ocm
    description: |
      the directory into which the merged component-descriptor, as well as the imported blobs
      are to be written.

  post-process:
    type: choice
    default: component-cli
    options:
      - component-cli
      - none
    description: |
      configures how the merged component-descriptor should be post-processed.

      `component-cli` option is needed for properly honouring imagevectors (this will both
      add component-references, and referenced oci-image-resources, as well as adding
      labels for calculating image-vector-overwrites).

  ocm-component-prefixes:
    type: string
    default: europe-docker.pkg.dev/gardener-project/releases/gardener,europe-docker.pkg.dev/gardener-project/snapshots/gardener
    description: |
      the ocm-component-prefixes to use in case post-processing is set to `component-cli`.

outputs:
  component-descriptor:
    description: |
      the resulting component-descriptor
    value: ${{ steps.output.outputs.component-descriptor }}
  name:
    description: |
      the component-name (for convenience)
    value: ${{ steps.merge.outputs.name }}
  version:
    description: |
      the component-version (for convenience)
    value: ${{ steps.merge.outputs.version }}
  component-version:
    description: |
      the {component-name}:{component-version} (for convenience)
    value: ${{ steps.merge.outputs.component-version }}

runs:
  using: composite
  steps:
    - name: install-gardener-gha-libs
      uses: gardener/cc-utils/.github/actions/install-gardener-gha-libs@master
    - name: preprocess
      id: preprocess
      shell: bash
      run: |
        ctx="${{ inputs.ctx }}"
        if [ -n "${ctx}" ]; then
          artefact_name="${ctx}-*.ocm-artefacts"
        else
          artefact_name="*.ocm-artefacts"
        fi
        echo "artefact-name=${artefact_name}" >> "${GITHUB_OUTPUT}"
        mkdir -p "${{ inputs.outdir }}"
    - name: import-component-descriptor
      shell: bash
      if: ${{ inputs.component-descriptor != '' }}
      run: |
        cat <<EOF > "${{ inputs.outdir }}/base-component-descriptor.yaml"
        ${{ inputs.component-descriptor }}
        EOF
    - name: import-component-descriptor-artefact
      if: ${{ inputs.component-descriptor-artefact != '' }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.component-descriptor-artefact }}
    - name: extract-component-descriptor-artefact
      if: ${{ inputs.component-descriptor-artefact != '' }}
      shell: bash
      run: |
        archive=component-descriptor.tar.gz
        if [ ! -f "${archive}" ]; then
          echo "Error: expected file not present: ${archive}"
          exit 1
        fi
        tar xf ${archive}
        component_descriptor_path='component-descriptor.yaml'
        if [ ! -f "${component_descriptor_path}" ]; then
          echo "Error: archive did not contain expected ${component_descriptor_path} file"
          exit 1
        fi
        echo "component-descriptor<<EOF" >> "${GITHUB_OUTPUT}"
        cat "${component_descriptor_path}" >> ${GITHUB_OUTPUT}
        echo EOF >> "${GITHUB_OUTPUT}"
        mv "${component_descriptor_path}" "${{ inputs.outdir }}/base-component-descriptor.yaml"
    - name: prepare-component-descriptor
      shell: bash
      run: |
        base=${{ inputs.outdir }}/base-component-descriptor.yaml
        component_descriptor=${{ inputs.outdir }}/component-descriptor.yaml
        if [ -f ${base} ]; then
          mv "${base}" "${component_descriptor}"
        else
          # create minimal base component-descriptor
          python -m ocm create \
           --out "${component_descriptor}"
        fi
    - name: import-ocm-fragments
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ steps.preprocess.outputs.artefact-name }}
        path: ${{ inputs.outdir }}
        merge-multiple: true
    - name: extract-ocm-fragments
      shell: bash
      run: |
        set -eu
        cd "${{ inputs.outdir }}"
        for tf in $(ls *.tar.gz); do
          echo "extracting ${tf} into $PWD"
          tar xf "${tf}"
          unlink "${tf}"
        done
    - name: merge-fragments
      id: merge
      shell: python
      run: |
        import os
        import pprint

        import yaml

        out_dir = '${{ inputs.outdir }}'
        with open(component_descriptor_path := f'{out_dir}/component-descriptor.yaml') as f:
          component_descriptor = yaml.safe_load(f)

        component = component_descriptor['component']
        if not 'sources' in component:
          component['sources'] = []
        if not 'resources' in component:
          component['resources'] = []

        # TODO: might extend `ocm/__main__.py` to deduplicate; also, we should improve validation
        for fname in os.listdir(out_dir):
          path = os.path.join(out_dir, fname)
          if not os.path.isfile(path):
            continue
          if not fname.endswith('.ocm-artefacts'):
            continue

          print(f'adding artefacts from {path}')
          with open(path) as f:
            artefacts = yaml.safe_load(f)

          if ( resources := artefacts.get('resources')):
            component['resources'].extend(resources)

          if ( sources := artefacts.get('sources')):
            component['sources'].extend(sources)

          os.unlink(path)

        # preprocess: patch-in versions for local artefacts
        cversion = component.get('version')
        for artefact in component['sources'] + component['resources']:
          if not cversion:
            continue
          if artefact.get('version'):
            continue # existing data has precedence
          if artefact.get('relation') != 'local':
            continue # we only patch-in version for local artefacts
          artefact['version'] = cversion

        pprint.pprint(component_descriptor)

        with open(component_descriptor_path, 'w') as f:
          yaml.safe_dump(component_descriptor, f)

        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
          name = component['name']
          version = component['version']
          f.write(f'name={name}\n')
          f.write(f'version={version}\n')
          f.write(f'component-version={name}:{version}\n')

    - name: checkout-for-postprocessing
      uses: gardener/cc-utils/.github/actions/trusted-checkout@master
      if: ${{ inputs.post-process == 'component-cli' }}
      with:
        path: repo.d # avoid conflicts w/ component-descriptor
    - name: post-process
      if: ${{ inputs.post-process == 'component-cli' }}
      shell: python
      run: |
        import dataclasses
        import logging

        import yaml

        import ocm
        import ocm.gardener

        logger = logging.getLogger('post-process')

        logger.info('looking for imagevector')
        if not (imagevector_file := ocm.gardener.find_imagevector_file(repo_root='repo.d')):
          logger.info('did not find imagevector')
          exit(0)

        out_dir = '${{ inputs.outdir }}'
        with open(component_descriptor_path := f'{out_dir}/component-descriptor.yaml') as f:
          component_descriptor = ocm.ComponentDescriptor.from_dict(
            yaml.safe_load(f),
          )

        component = component_descriptor.component

        prefixes = '${{ inputs.ocm-component-prefixes }}'.split(',')
        logger.info(f'{prefixes=}')
        for prefix in prefixes:
          # hack: in some (/all?) cases, images in imagevectors use `public` oci-registry,
          #       which is a virtual oci-registry including both snapshots and releases
          #       add to prefixes so ocm-component-references are correctly being detected
          prefix = prefix.rstrip('/')
          if prefix.endswith('snapshots/gardener'):
            prefixes.append(f'{prefix.removesuffix("snapshots/gardener")}public/gardener')
          elif prefix.endswith('releases/gardener'):
            prefixes.append(f'{prefix.removesuffix("releases/gardener")}public/gardener')

        prefixes = set(prefixes) # deduplicate

        logger.info(f'{prefixes=}')

        ocm.gardener.add_resources_from_imagevector(
          component=component,
          images=ocm.gardener.iter_images_from_imagevector(
            images_yaml_path=imagevector_file,
          ),
          component_prefixes=prefixes,
          deduplicate_resources=False,
        )
        with open(component_descriptor_path, 'w') as f:
          yaml.dump(
            data=dataclasses.asdict(component_descriptor),
            stream=f,
            Dumper=ocm.EnumValueYamlDumper,
          )

    - name: output-component-descriptor
      id: output
      shell: bash
      run: |
        set -eu
        echo "component-descriptor<<EOF" >> "${GITHUB_OUTPUT}"
        cat "${{ inputs.outdir }}/component-descriptor.yaml" >> "${GITHUB_OUTPUT}"
        echo EOF >> ${GITHUB_OUTPUT}
