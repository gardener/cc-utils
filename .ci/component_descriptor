#!/usr/bin/env python3

import dataclasses
import os
import yaml

import pkg_resources

import ci.util
import gci.componentmodel

component_descriptor_base_path = os.path.abspath(ci.util.check_env('BASE_DEFINITION_PATH'))
component_descriptor_path = os.path.abspath(ci.util.check_env('COMPONENT_DESCRIPTOR_PATH'))


COMPONENT_SPEC_PYPI_PROJECT_NAME = 'gardener-component-model'
COMPONENT_SPEC_COMPONENT_NAME = 'github.com/gardener/component-spec'


def parse_component_descriptor():
    component_descriptor = gci.componentmodel.ComponentDescriptor.from_dict(
        ci.util.parse_yaml_file(component_descriptor_base_path)
    )
    return component_descriptor


def component_spec_version():
    with open(
        os.path.join(
            os.path.abspath(ci.util.check_env('MAIN_REPO_DIR')),
            'requirements.txt',
        ),
        'r',
    ) as requirements_file:
        parsed_requirements = pkg_resources.parse_requirements(requirements_file)
        if not (component_spec_requirement := next(
            (r for r in parsed_requirements if r.project_name == COMPONENT_SPEC_PYPI_PROJECT_NAME),
            None,
        )):
            raise RuntimeError('Unable to find component-spec in requirements.txt')
        if len(component_spec_requirement.specs) > 1:
            raise RuntimeError('No exact version specified for component-spec dependency')
        component_spec_specs = component_spec_requirement.specs[0]

        return component_spec_specs[1]


def add_component_dependency(
    component: gci.componentmodel.Component,
    component_name: str,
    component_version: str,
):
    logical_name = component_name.replace('/', '_')

    component.componentReferences.append(
        gci.componentmodel.ComponentReference(
            componentName=component_name,
            name=logical_name,
            version=component_version,
            labels=[],
        )
    )


component_descriptor = parse_component_descriptor()
component = component_descriptor.component

logical_name = COMPONENT_SPEC_COMPONENT_NAME.replace('/', '_')

component.componentReferences.append(
    gci.componentmodel.ComponentReference(
        componentName=COMPONENT_SPEC_COMPONENT_NAME,
        name=logical_name,
        version=component_spec_version(),
        labels=[],
    )
)

with open(component_descriptor_path, 'w') as f:
    yaml.dump(
        data=dataclasses.asdict(component_descriptor),
        Dumper=gci.componentmodel.EnumValueYamlDumper,
        stream=f,
    )
